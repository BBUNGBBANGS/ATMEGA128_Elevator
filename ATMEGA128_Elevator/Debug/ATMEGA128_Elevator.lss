
ATMEGA128_Elevator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000004f6  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080010c  0080010c  00000596  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b04  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f3  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e5  00000000  00000000  00001963  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000153  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000027a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	24 c2       	rjmp	.+1096   	; 0x45e <__vector_5>
  16:	00 00       	nop
  18:	34 c2       	rjmp	.+1128   	; 0x482 <__vector_6>
  1a:	00 00       	nop
  1c:	44 c2       	rjmp	.+1160   	; 0x4a6 <__vector_7>
  1e:	00 00       	nop
  20:	55 c2       	rjmp	.+1194   	; 0x4cc <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	1c c1       	rjmp	.+568    	; 0x272 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 32       	cpi	r26, 0x2F	; 47
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d2 d0       	rcall	.+420    	; 0x268 <main>
  c4:	16 c2       	rjmp	.+1068   	; 0x4f2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Port_Init>:
}

static void Port_Init(void)
{
    /* LED 연결 포트 출력 설정 */
    DDRA = 0xFF; 
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
    /* LED 초기 출력 OFF 설정(HIGH) */
    PORTA = 0xFF; 
  cc:	8b bb       	out	0x1b, r24	; 27

    /* 7-Segment Data 포트 출력 설정 */
    DDRC = 0x7F; 
  ce:	8f e7       	ldi	r24, 0x7F	; 127
  d0:	84 bb       	out	0x14, r24	; 20
    /* 7-Segment Data 출력 OFF 설정 (HIGH) */
    PORTC = 0x7F; 
  d2:	85 bb       	out	0x15, r24	; 21

    /* 7-Segment Select 포트 출력 설정 */
    DDRD = 0x0F; 
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	81 bb       	out	0x11, r24	; 17
    /* 7-Segment Select 출력 OFF 설정 (LOW) */
    PORTD = 0x00; 
  d8:	12 ba       	out	0x12, r1	; 18

    /* Switch 포트 출력 설정 */
    DDRE = 0x00; 
  da:	12 b8       	out	0x02, r1	; 2
    /* Switch 핀 Pull-Up 설정(HIGH) */
    PORTE = 0xF0;
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	83 b9       	out	0x03, r24	; 3
  e0:	08 95       	ret

000000e2 <External_ISR_Init>:
}

static void External_ISR_Init(void)
{
    /* INT4,5,6,7 Riging Edge Interrupt 설정 */
    EICRB = 0xFF;    
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bf       	out	0x3a, r24	; 58
    /* INT4,5,6,7 Enable */
    EIMSK = 0xF0; 
  e6:	80 ef       	ldi	r24, 0xF0	; 240
  e8:	89 bf       	out	0x39, r24	; 57
  ea:	08 95       	ret

000000ec <Timer1_Init>:
}

static void Timer1_Init(void)
{
    /* Timer 1 Overflow interrupt enable */
	TIMSK = 0x04; 
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;
  f0:	1f bc       	out	0x2f, r1	; 47
    /* Timer 1 Normal모드, 256 Prescale 설정 */    
	TCCR1B = 0x04; 
  f2:	8e bd       	out	0x2e, r24	; 46
    /* Timer 1 Counter 설정, 1/16*256*(65536-59286) : 100[ms] */    
	TCNT1 =  59286; 
  f4:	86 e9       	ldi	r24, 0x96	; 150
  f6:	97 ee       	ldi	r25, 0xE7	; 231
  f8:	9d bd       	out	0x2d, r25	; 45
  fa:	8c bd       	out	0x2c, r24	; 44
    /* Global Interrupt Enable */    
	SREG = 0x80; 
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	8f bf       	out	0x3f, r24	; 63
 100:	08 95       	ret

00000102 <Elevator_Control>:
static void Elevator_Control(void)
{
    static uint8_t Elevator_Position_Old;
    
    /* 엘레베이터 위치 Control */
    switch(Elevator_Position)
 102:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Elevator_Position>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	c1 f1       	breq	.+112    	; 0x17a <Elevator_Control+0x78>
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	09 f4       	brne	.+2      	; 0x110 <Elevator_Control+0xe>
 10e:	67 c0       	rjmp	.+206    	; 0x1de <Elevator_Control+0xdc>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	09 f0       	breq	.+2      	; 0x116 <Elevator_Control+0x14>
 114:	9a c0       	rjmp	.+308    	; 0x24a <Elevator_Control+0x148>
    {
        case ELEVATOR_POSITION_FIRST : 
            /* LED OFF (Y2 ,Y3) */
            PORTA |= (LED_Y2 | LED_Y3);   
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8c 60       	ori	r24, 0x0C	; 12
 11a:	8b bb       	out	0x1b, r24	; 27
            /* 엘리베이터 위치 정보 이전값 기억 */
            Elevator_Position_Old = Elevator_Position;
 11c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Elevator_Position>
 120:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
            /* SW6이 눌린 경우 진입 */
            if(INT4_Status == 1)
 124:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <INT4_Status>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	41 f4       	brne	.+16     	; 0x13c <Elevator_Control+0x3a>
            {
                /* LED ON (Y0) */
                PORTA &= (uint8_t)(~LED_Y0); 
 12c:	8b b3       	in	r24, 0x1b	; 27
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	8b bb       	out	0x1b, r24	; 27
                /* 엘리베이터 위치 정보 이동중으로 변경 */                
                Elevator_Position =  ELEVATOR_POSITION_MOVING;
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Elevator_Position>
                INT4_Status = 0;
 138:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <INT4_Status>
            }
            /* SW7이 눌린 경우 진입 */            
            if(INT5_Status == 1)
 13c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <INT5_Status>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	41 f4       	brne	.+16     	; 0x154 <Elevator_Control+0x52>
            {
                /* LED ON (Y1) */
                PORTA &= (uint8_t)(~LED_Y1); 
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	8b bb       	out	0x1b, r24	; 27
                /* 엘리베이터 위치 정보 이동중으로 변경 */         
                Elevator_Position =  ELEVATOR_POSITION_MOVING;
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Elevator_Position>
                INT5_Status = 0;
 150:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <INT5_Status>
            }
            /* SW9이 눌린 경우 진입 */
            if(INT7_Status == 1)
 154:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <INT7_Status>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	49 f4       	brne	.+18     	; 0x16e <Elevator_Control+0x6c>
            {
                /* 엘리베이터 문 열기 */         
                Elevator_Door_Status = ELEVATOR_DOOR_OPEN;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Elevator_Door_Status>
                /* 엘리베이터 문 열림 시간 리셋 */         
                Elevator_Door_Time_100ms = 0; 
 162:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Elevator_Door_Time_100ms+0x1>
 166:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Elevator_Door_Time_100ms>
                INT7_Status = 0;
 16a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <INT7_Status>
            }
            /* 7-Segment Q0 출력 (1) */
            PORTD = 0x01;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	82 bb       	out	0x12, r24	; 18
            PORTC = Segment_Num[ELEVATOR_POSITION_FIRST];
 172:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Segment_Num+0x1>
 176:	85 bb       	out	0x15, r24	; 21
        break;
 178:	68 c0       	rjmp	.+208    	; 0x24a <Elevator_Control+0x148>
        case ELEVATOR_POSITION_SECOND : 
            /* LED OFF (Y0 ,Y1) */
            PORTA |= (LED_Y0 | LED_Y1);   
 17a:	8b b3       	in	r24, 0x1b	; 27
 17c:	83 60       	ori	r24, 0x03	; 3
 17e:	8b bb       	out	0x1b, r24	; 27
            /* 엘리베이터 위치 정보 이전값 기억 */
            Elevator_Position_Old = Elevator_Position;
 180:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Elevator_Position>
 184:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
            /* SW6이 눌린 경우 진입 */
            if(INT4_Status == 1)
 188:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <INT4_Status>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	49 f4       	brne	.+18     	; 0x1a2 <Elevator_Control+0xa0>
            {
                /* 엘리베이터 문 열기 */         
                Elevator_Door_Status = ELEVATOR_DOOR_OPEN;
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Elevator_Door_Status>
                /* 엘리베이터 문 열림 시간 리셋 */         
                Elevator_Door_Time_100ms = 0; 
 196:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Elevator_Door_Time_100ms+0x1>
 19a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Elevator_Door_Time_100ms>
                INT4_Status = 0;
 19e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <INT4_Status>
            }
            /* SW8이 눌린 경우 진입 */      
            if(INT6_Status == 1)
 1a2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <INT6_Status>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	41 f4       	brne	.+16     	; 0x1ba <Elevator_Control+0xb8>
            {               
                 /* LED ON (Y2) */
                PORTA &= (uint8_t)(~LED_Y2); 
 1aa:	8b b3       	in	r24, 0x1b	; 27
 1ac:	8b 7f       	andi	r24, 0xFB	; 251
 1ae:	8b bb       	out	0x1b, r24	; 27
                /* 엘리베이터 위치 정보 이동중으로 변경 */    
                Elevator_Position = ELEVATOR_POSITION_MOVING;
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Elevator_Position>
                INT6_Status = 0;
 1b6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <INT6_Status>
            }
            /* SW9이 눌린 경우 진입 */      
            if(INT7_Status == 1)
 1ba:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <INT7_Status>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	41 f4       	brne	.+16     	; 0x1d2 <Elevator_Control+0xd0>
            {                
                /* LED ON (Y3) */
                PORTA &= (uint8_t)(~LED_Y3);  
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	87 7f       	andi	r24, 0xF7	; 247
 1c6:	8b bb       	out	0x1b, r24	; 27
                /* 엘리베이터 위치 정보 이동중으로 변경 */    
                Elevator_Position = ELEVATOR_POSITION_MOVING;
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Elevator_Position>
                INT7_Status = 0;
 1ce:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <INT7_Status>
            }
            /* 7-Segment Q0 출력 (2) */
            PORTD = 0x01;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	82 bb       	out	0x12, r24	; 18
            PORTC = Segment_Num[ELEVATOR_POSITION_SECOND];
 1d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Segment_Num+0x2>
 1da:	85 bb       	out	0x15, r24	; 21
        break;
 1dc:	36 c0       	rjmp	.+108    	; 0x24a <Elevator_Control+0x148>
        case ELEVATOR_POSITION_MOVING : 
            /* 엘리베이터 이동 시간 10[s] 이후 위치 정보 변경 */
            if(Elevator_Moving_Time_100ms>=100)
 1de:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Elevator_Moving_Time_100ms>
 1e2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Elevator_Moving_Time_100ms+0x1>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	91 05       	cpc	r25, r1
 1ea:	a8 f0       	brcs	.+42     	; 0x216 <Elevator_Control+0x114>
            {
                /* 엘리베이터 위치 정보 이전값이 1층 일 경우 진입 */
                if(Elevator_Position_Old == ELEVATOR_POSITION_FIRST)
 1ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	29 f4       	brne	.+10     	; 0x1fe <Elevator_Control+0xfc>
                {
                    /* 엘리베이터 위치 정보 2층으로 변경 */
                    Elevator_Position = ELEVATOR_POSITION_SECOND;  
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Elevator_Position>
                    /* 엘리베이터 목표 층 도착했으므로 문 열림 */ 
                    Elevator_Door_Status = ELEVATOR_DOOR_OPEN;           
 1fa:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <Elevator_Door_Status>
                }                
                /* 엘리베이터 위치 정보 이전값이 2층 일 경우 진입 */
                if(Elevator_Position_Old == ELEVATOR_POSITION_SECOND)
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	31 f4       	brne	.+12     	; 0x20e <Elevator_Control+0x10c>
                {                    
                    /* 엘리베이터 위치 정보 1층으로 변경 */
                    Elevator_Position = ELEVATOR_POSITION_FIRST;    
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Elevator_Position>
                    /* 엘리베이터 목표 층 도착했으므로 문 열림 */ 
                    Elevator_Door_Status = ELEVATOR_DOOR_OPEN;           
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Elevator_Door_Status>
                }
                Elevator_Moving_Time_100ms = 0;
 20e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <Elevator_Moving_Time_100ms+0x1>
 212:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <Elevator_Moving_Time_100ms>
            }
            /* 7-Segment Q0 출력 깜빡임 (8) */
            if(Segment_Timer_100ms>=10)
 216:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Segment_Timer_100ms>
 21a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Segment_Timer_100ms+0x1>
 21e:	0a 97       	sbiw	r24, 0x0a	; 10
 220:	78 f0       	brcs	.+30     	; 0x240 <Elevator_Control+0x13e>
            {
                /* 7-Segment Q0 선택 */
                PORTD = 0x01;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	82 bb       	out	0x12, r24	; 18
                /* 7-Segment 출력 OFF */
                PORTC = 0xFF;           
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	85 bb       	out	0x15, r24	; 21
                /* Segment Timer가 2[s] 일 경우 Tiemr Reset */ 
                if(Segment_Timer_100ms>=20)     
 22a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Segment_Timer_100ms>
 22e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Segment_Timer_100ms+0x1>
 232:	44 97       	sbiw	r24, 0x14	; 20
 234:	50 f0       	brcs	.+20     	; 0x24a <Elevator_Control+0x148>
                {
                    Segment_Timer_100ms = 0;
 236:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <Segment_Timer_100ms+0x1>
 23a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <Segment_Timer_100ms>
 23e:	05 c0       	rjmp	.+10     	; 0x24a <Elevator_Control+0x148>
                }     
            }
            else
            {
                /* 7-Segment Q0 선택 */
                PORTD = 0x01;                
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	82 bb       	out	0x12, r24	; 18
                /* 7-Segment 8 출력 */
                PORTC = Segment_Num[ELEVATOR_POSITION_MOVING];     
 244:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Segment_Num+0x8>
 248:	85 bb       	out	0x15, r24	; 21

        break;
    }

    /* 엘리베이터 문 상태 Control */
    if(Elevator_Door_Status == ELEVATOR_DOOR_OPEN)
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Elevator_Door_Status>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	39 f4       	brne	.+14     	; 0x260 <Elevator_Control+0x15e>
    {
        /* LED ON (Y4,Y7) */
        PORTA &= (uint8_t)(~(LED_Y4|LED_Y7));    
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	8f 76       	andi	r24, 0x6F	; 111
 256:	8b bb       	out	0x1b, r24	; 27
        /* LED OFF (Y5,Y6) */
        PORTA |= (LED_Y5|LED_Y6); 
 258:	8b b3       	in	r24, 0x1b	; 27
 25a:	80 66       	ori	r24, 0x60	; 96
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	08 95       	ret
    }
    else
    {
        /* LED ON (Y4,Y5,Y6,Y7) */
        PORTA &= (uint8_t)(~(LED_Y4|LED_Y5|LED_Y6|LED_Y7));
 260:	8b b3       	in	r24, 0x1b	; 27
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	8b bb       	out	0x1b, r24	; 27
 266:	08 95       	ret

00000268 <main>:
static void Timer1_Init(void);
static void Elevator_Control(void);

int main(void)
{
    Port_Init();
 268:	2f df       	rcall	.-418    	; 0xc8 <Port_Init>
    External_ISR_Init();
 26a:	3b df       	rcall	.-394    	; 0xe2 <External_ISR_Init>
    Timer1_Init();
 26c:	3f df       	rcall	.-386    	; 0xec <Timer1_Init>
 26e:	49 df       	rcall	.-366    	; 0x102 <Elevator_Control>

    while (1) 
    {
        Elevator_Control();
 270:	fe cf       	rjmp	.-4      	; 0x26e <main+0x6>

00000272 <__vector_14>:
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
    }
}


ISR(TIMER1_OVF_vect)
{
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
    /* Switch 중복 입력 방지를 위해 300[ms]의 Glitch Filter Time을 가짐 */
    if(INT4_Status_ISR == 1)
 284:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <INT4_Status_ISR>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	49 f5       	brne	.+82     	; 0x2de <__vector_14+0x6c>
    {
        INT4_timer_100ms++;
 28c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <INT4_timer_100ms>
 290:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <INT4_timer_100ms+0x1>
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <INT4_timer_100ms+0x1>
 29c:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <INT4_timer_100ms>
        if(INT4_timer_100ms >= 3)
 2a0:	23 30       	cpi	r18, 0x03	; 3
 2a2:	31 05       	cpc	r19, r1
 2a4:	e0 f0       	brcs	.+56     	; 0x2de <__vector_14+0x6c>
        {
            if((INT4_Status_ISR == 1)&&(INT4_Status_Old == 0))
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	91 f4       	brne	.+36     	; 0x2ce <__vector_14+0x5c>
 2aa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <INT4_Status_Old>
 2ae:	81 11       	cpse	r24, r1
 2b0:	0e c0       	rjmp	.+28     	; 0x2ce <__vector_14+0x5c>
            {
                INT4_Status = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <INT4_Status>
                INT4_Count++;
 2b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <INT4_Count>
 2bc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <INT4_Count+0x1>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <INT4_Count+0x1>
 2c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <INT4_Count>
                INT4_Status_ISR = 0;
 2ca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <INT4_Status_ISR>
            }
            INT4_Status_Old = INT4_Status_ISR;
 2ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <INT4_Status_ISR>
 2d2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <INT4_Status_Old>
            INT4_timer_100ms = 0;
 2d6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <INT4_timer_100ms+0x1>
 2da:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <INT4_timer_100ms>
        }
    }
    if(INT5_Status_ISR == 1)
 2de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <INT5_Status_ISR>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	49 f5       	brne	.+82     	; 0x338 <__vector_14+0xc6>
    {
        INT5_timer_100ms++;
 2e6:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <INT5_timer_100ms>
 2ea:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <INT5_timer_100ms+0x1>
 2ee:	2f 5f       	subi	r18, 0xFF	; 255
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <INT5_timer_100ms+0x1>
 2f6:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <INT5_timer_100ms>
        if(INT5_timer_100ms >= 3)
 2fa:	23 30       	cpi	r18, 0x03	; 3
 2fc:	31 05       	cpc	r19, r1
 2fe:	e0 f0       	brcs	.+56     	; 0x338 <__vector_14+0xc6>
        {
            if((INT5_Status_ISR == 1)&&(INT5_Status_Old == 0))
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	91 f4       	brne	.+36     	; 0x328 <__vector_14+0xb6>
 304:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <INT5_Status_Old>
 308:	81 11       	cpse	r24, r1
 30a:	0e c0       	rjmp	.+28     	; 0x328 <__vector_14+0xb6>
            {
                INT5_Status = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <INT5_Status>
                INT5_Count++;
 312:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <INT5_Count>
 316:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <INT5_Count+0x1>
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <INT5_Count+0x1>
 320:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <INT5_Count>
                INT5_Status_ISR = 0;
 324:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <INT5_Status_ISR>
            }
            INT5_Status_Old = INT5_Status_ISR;
 328:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <INT5_Status_ISR>
 32c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <INT5_Status_Old>
            INT5_timer_100ms = 0;
 330:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <INT5_timer_100ms+0x1>
 334:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <INT5_timer_100ms>
        }
    }
    if(INT6_Status_ISR == 1)
 338:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <INT6_Status_ISR>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	49 f5       	brne	.+82     	; 0x392 <__vector_14+0x120>
    {
        INT6_timer_100ms++;
 340:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <INT6_timer_100ms>
 344:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <INT6_timer_100ms+0x1>
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	3f 4f       	sbci	r19, 0xFF	; 255
 34c:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <INT6_timer_100ms+0x1>
 350:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <INT6_timer_100ms>
        if(INT6_timer_100ms >= 3)
 354:	23 30       	cpi	r18, 0x03	; 3
 356:	31 05       	cpc	r19, r1
 358:	e0 f0       	brcs	.+56     	; 0x392 <__vector_14+0x120>
        {
            if((INT6_Status_ISR == 1)&&(INT6_Status_Old == 0))
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	91 f4       	brne	.+36     	; 0x382 <__vector_14+0x110>
 35e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <INT6_Status_Old>
 362:	81 11       	cpse	r24, r1
 364:	0e c0       	rjmp	.+28     	; 0x382 <__vector_14+0x110>
            {
                INT6_Status = 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <INT6_Status>
                INT6_Count++;
 36c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <INT6_Count>
 370:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <INT6_Count+0x1>
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <INT6_Count+0x1>
 37a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <INT6_Count>
                INT6_Status_ISR = 0;
 37e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <INT6_Status_ISR>
            }
            INT6_Status_Old = INT6_Status_ISR;
 382:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <INT6_Status_ISR>
 386:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <INT6_Status_Old>
            INT6_timer_100ms = 0;
 38a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <INT6_timer_100ms+0x1>
 38e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <INT6_timer_100ms>
        }
    }
    if(INT7_Status_ISR == 1)
 392:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <INT7_Status_ISR>
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	49 f5       	brne	.+82     	; 0x3ec <__vector_14+0x17a>
    {
        INT7_timer_100ms++;
 39a:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <INT7_timer_100ms>
 39e:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <INT7_timer_100ms+0x1>
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <INT7_timer_100ms+0x1>
 3aa:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <INT7_timer_100ms>
        if(INT7_timer_100ms >= 3)
 3ae:	23 30       	cpi	r18, 0x03	; 3
 3b0:	31 05       	cpc	r19, r1
 3b2:	e0 f0       	brcs	.+56     	; 0x3ec <__vector_14+0x17a>
        {
            if((INT7_Status_ISR == 1)&&(INT7_Status_Old == 0))
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	91 f4       	brne	.+36     	; 0x3dc <__vector_14+0x16a>
 3b8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <INT7_Status_Old>
 3bc:	81 11       	cpse	r24, r1
 3be:	0e c0       	rjmp	.+28     	; 0x3dc <__vector_14+0x16a>
            {
                INT7_Status = 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <INT7_Status>
                INT7_Count++;
 3c6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <INT7_Count>
 3ca:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <INT7_Count+0x1>
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <INT7_Count+0x1>
 3d4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <INT7_Count>
                INT7_Status_ISR = 0;
 3d8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <INT7_Status_ISR>
            }
            INT7_Status_Old = INT7_Status_ISR;
 3dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <INT7_Status_ISR>
 3e0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <INT7_Status_Old>
            INT7_timer_100ms = 0;
 3e4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <INT7_timer_100ms+0x1>
 3e8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <INT7_timer_100ms>
        }
    }

    if(Elevator_Position == ELEVATOR_POSITION_MOVING)
 3ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Elevator_Position>
 3f0:	88 30       	cpi	r24, 0x08	; 8
 3f2:	91 f4       	brne	.+36     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
    {
        Elevator_Moving_Time_100ms++;
 3f4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Elevator_Moving_Time_100ms>
 3f8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Elevator_Moving_Time_100ms+0x1>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <Elevator_Moving_Time_100ms+0x1>
 402:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Elevator_Moving_Time_100ms>
        Segment_Timer_100ms++;
 406:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Segment_Timer_100ms>
 40a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Segment_Timer_100ms+0x1>
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Segment_Timer_100ms+0x1>
 414:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Segment_Timer_100ms>
    }

    if(Elevator_Door_Status == ELEVATOR_DOOR_OPEN)
 418:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Elevator_Door_Status>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	91 f4       	brne	.+36     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
    {
        Elevator_Door_Time_100ms++;
 420:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Elevator_Door_Time_100ms>
 424:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Elevator_Door_Time_100ms+0x1>
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <Elevator_Door_Time_100ms+0x1>
 42e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Elevator_Door_Time_100ms>
        if(Elevator_Door_Time_100ms >= 50)
 432:	c2 97       	sbiw	r24, 0x32	; 50
 434:	38 f0       	brcs	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
        {
            Elevator_Door_Status = ELEVATOR_DOOR_CLOSE;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Elevator_Door_Status>
            Elevator_Door_Time_100ms = 0;
 43c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Elevator_Door_Time_100ms+0x1>
 440:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Elevator_Door_Time_100ms>
        }
    }
    
    /* Timer 1 Counter 설정, 1/16*256*(65536-59286) : 100[ms] */    
    TCNT1 = 59286; 
 444:	86 e9       	ldi	r24, 0x96	; 150
 446:	97 ee       	ldi	r25, 0xE7	; 231
 448:	9d bd       	out	0x2d, r25	; 45
 44a:	8c bd       	out	0x2c, r24	; 44
}
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_5>:

ISR(INT4_vect)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
    /* 엘리베이터 위치가 1층일 경우에만 SW 입력 받음 */
    if(Elevator_Position == ELEVATOR_POSITION_FIRST)
 46a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Elevator_Position>
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	11 f4       	brne	.+4      	; 0x476 <__vector_5+0x18>
    {
        INT4_Status_ISR = 1;
 472:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <INT4_Status_ISR>
    }
}
 476:	8f 91       	pop	r24
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_6>:

ISR(INT5_vect)
{
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	8f 93       	push	r24
    /* 엘리베이터 위치가 1층일 경우에만 SW 입력 받음 */
    if(Elevator_Position == ELEVATOR_POSITION_FIRST)
 48e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Elevator_Position>
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	11 f4       	brne	.+4      	; 0x49a <__vector_6+0x18>
    {
        INT5_Status_ISR = 1;
 496:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <INT5_Status_ISR>
    }
}
 49a:	8f 91       	pop	r24
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__vector_7>:

ISR(INT6_vect)
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	8f 93       	push	r24
    /* 엘리베이터 위치가 2층일 경우에만 SW 입력 받음 */
    if(Elevator_Position == ELEVATOR_POSITION_SECOND)
 4b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Elevator_Position>
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	19 f4       	brne	.+6      	; 0x4c0 <__vector_7+0x1a>
    {
        INT6_Status_ISR = 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <INT6_Status_ISR>
    }
}
 4c0:	8f 91       	pop	r24
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <__vector_8>:

ISR(INT7_vect)
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	8f 93       	push	r24
    /* 엘리베이터 위치가 2층일 경우에만 SW 입력 받음 */
    if(Elevator_Position == ELEVATOR_POSITION_SECOND)
 4d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Elevator_Position>
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	19 f4       	brne	.+6      	; 0x4e6 <__vector_8+0x1a>
    {
        INT7_Status_ISR = 1;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <INT7_Status_ISR>
    }
}
 4e6:	8f 91       	pop	r24
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
